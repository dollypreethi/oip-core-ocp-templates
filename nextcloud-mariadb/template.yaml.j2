apiVersion: v1
kind: Template
labels:
  template: {{tmpl_vars['templates']['nextcloud-mariadb']['template_label']}}
message: |-
  The following service(s) have been created in your project: ${APP_NAME}, ${DATABASE_SERVICE_NAME}.

    Deployment ID: ${DEPL_ID}
    ${APP_NAME}:
      Nextcloud admin username: ${NEXTCLOUD_ADMIN_USER}
      Nextcloud admin password: ${NEXTCLOUD_ADMIN_PASSWORD}
      Nextcloud connection URL: ${NEXTCLOUD_HOST}

    ${DATABASE_SERVICE_NAME}:
            Username: ${MYSQL_USER}
            Password: ${MYSQL_PASSWORD}
       Database Name: ${MYSQL_DATABASE}
      Connection URL: mysql://${DATABASE_SERVICE_NAME}:3306/

  For more information about using this template, including OpenShift considerations, see https://github.com/{{tmpl_vars['github']['org']}}/{{tmpl_vars['github']['repo']}}/blob/{{tmpl_vars['github']['branch']}}/${TEMPLATE_NAME}/

metadata:
  name: {{tmpl_vars['templates']['nextcloud-mariadb']['template_name']}}
  annotations:
    description: |-
      {{tmpl_vars['templates']['nextcloud-mariadb']['template_desc'] | indent( width=6, indentfirst=False)}}
    tags: {{tmpl_vars['templates']['nextcloud-mariadb']['tags']}}
    iconClass: {{tmpl_vars['templates']['nextcloud-mariadb']['iconClass']}}
    openshift.io/display-name: {{tmpl_vars['templates']['nextcloud-mariadb']['display_name']}}
    template.openshift.io/long-description: |-
      {{tmpl_vars['templates']['nextcloud-mariadb']['toi_long_desc'] | indent( width=6, indentfirst=False)}}
    template.openshift.io/provider-display-name: {{tmpl_vars['oip_env']['provider']}}
    template.openshift.io/documentation-url: "https://github.com/{{tmpl_vars['github']['org']}}/{{tmpl_vars['github']['repo']}}/blob/{{tmpl_vars['github']['branch']}}/{{tmpl_vars['templates']['nextcloud-mariadb']['template_name']}}/README.md"
    template.openshift.io/support-url: "https://github.com/{{tmpl_vars['github']['org']}}/{{tmpl_vars['github']['repo']}}/issues"



parameters:

# Global parameters
- name: TEMPLATE_NAME
  description: Name of the template
  required: true
  value: nextcloud-mariadb
- name: APP_NAME
  description: Name of the application
  required: true
  value: nextcloud
- name: DEPL_ID
  description: Deployment ID
  required: true
  from: '[a-z0-9]{5}'
  generate: expression

# Nextcloud specific
- name: NEXTCLOUD_ADMIN_USER
  description: Username for Nextcloud user that will be granted admin privileges.
  displayName: Nextcloud Connection Admin Username
  from: admin[A-Z0-9]{3}
  generate: expression
  required: true
- name: NEXTCLOUD_ADMIN_PASSWORD
  description: Password for the Nextcloud admin user.
  displayName: Nextcloud Connection Admin Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  required: true
- name: NGINX_DOCKERFILE_REPO
  description: Nginx Dockerfile source repository
  value: https://github.com/{{tmpl_vars['github']['org']}}/{{tmpl_vars['github']['repo']}}.git
  required: true
- name: NEXTCLOUD_HOST
  description: Application URL of Nextcloud (Route/host)
  required: false
- name: NEXTCLOUD_TRUSTED_DOMAIN
  displayName: Nextcloud Trusted Domain
  description: Connections coming from other sources will be refused.
  required: true
  value: '{{tmpl_vars['oip_env']['hosting_wildcard_domain']}}'
- name: NEXTCLOUD_IMAGE
  description: Image to deploy
  value: docker.io/nextcloud
- name: NEXTCLOUD_IMAGE_TAG
  description: Tag of the Nextcloud Docker Image to deploy
  value: 13-fpm
- name: STORAGE_CLASS
  description: Storage class to use when claiming volume. It must support ReadWriteMany access mode.
  value: {{tmpl_vars['templates']['nextcloud-mariadb']['storageclass']}}
- name: PVC_SIZE
  description: PVC size for Apps, Config and Data
  value: 5Gi
- name: NEXTCLOUD_PROXY
  description: http proxy to use for Nextcloud to connect to internet, if any
  required: false
  value: {{tmpl_vars['http_proxy']['host']}}:{{tmpl_vars['http_proxy']['port']}}

# Proxy settings
- name: HTTP_PROXY
  description: http proxy to use to connect to internet, if any
  required: false
  value: {{tmpl_vars['http_proxy']['proto']}}://{{tmpl_vars['http_proxy']['host']}}:{{tmpl_vars['http_proxy']['port']}}
- name: HTTPS_PROXY
  description: https proxy to use to connect to internet, if any
  required: false
  value: {{tmpl_vars['http_proxy']['proto']}}://{{tmpl_vars['http_proxy']['host']}}:{{tmpl_vars['http_proxy']['port']}}
- name: NO_PROXY
  description: http proxy exclusion list, if proxy is configured
  required: false
  value: {{tmpl_vars['http_proxy']['no_proxy']}}
- name: http_proxy
  description: http proxy to use to connect to internet, if any
  required: false
  value: {{tmpl_vars['http_proxy']['proto']}}://{{tmpl_vars['http_proxy']['host']}}:{{tmpl_vars['http_proxy']['port']}}
- name: https_proxy
  description: https proxy to use to connect to internet, if any
  required: false
  value: {{tmpl_vars['http_proxy']['proto']}}://{{tmpl_vars['http_proxy']['host']}}:{{tmpl_vars['http_proxy']['port']}}
- name: no_proxy
  description: http proxy exclusion list, if proxy is configured
  required: false
  value: {{tmpl_vars['http_proxy']['no_proxy']}}

# Database
- name: DB_IMAGE
  description: Database image to deploy. Currently support only mariadb and mysql
  value: docker.io/mariadb
- name: DB_IMAGE_TAG
  description: Tag of the Docker DB Image to deploy
  value: '10.1'
- description: Maximum amount of memory the database container can use.
  displayName: Database Memory Limit
  name: DB_MEMORY_LIMIT
  required: true
  value: 512Mi
- description: The OpenShift Namespace where the database ImageStream resides.
  displayName: Namespace
  name: DB_IMGSTR_NAMESPACE
  value: openshift
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: mariadb
- description: Username for MariaDB user that will be used for accessing the database.
  displayName: MariaDB Connection Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: MYSQL_USER
  required: true
- description: Password for the MariaDB connection user.
  displayName: MariaDB Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MYSQL_PASSWORD
  required: true
- description: Password for the MariaDB root user.
  displayName: MariaDB root Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MYSQL_ROOT_PASSWORD
  required: true
- description: Name of the MariaDB database accessed.
  displayName: MariaDB Database Name
  name: MYSQL_DATABASE
  required: true
  value: nextcloud
- description: Database volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Database Volume Capacity
  name: DB_VOLUME_CAPACITY
  required: true
  value: 1Gi



objects:

- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-nextcloud_admin_username: '{.data[''nc-admin-username'']}'
      template.openshift.io/expose-nextcloud_admin_password: '{.data[''nc-admin-password'']}'
    labels:
      app: ${APP_NAME}-${DEPL_ID}
    name: ${APP_NAME}-nextcloud-${DEPL_ID}
  stringData:
    nc-admin-username: ${NEXTCLOUD_ADMIN_USER}
    nc-admin-password: ${NEXTCLOUD_ADMIN_PASSWORD}

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: ${APP_NAME}-${DEPL_ID}
    name: ${APP_NAME}-nextcloud-data-${DEPL_ID}
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: ${PVC_SIZE}
    storageClassName: ${STORAGE_CLASS}

- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APP_NAME}-${DEPL_ID}
    name: ${APP_NAME}-nextcloud-${DEPL_ID}
  spec:
    tags:
    - annotations:
        openshift.io/imported-from: ${NEXTCLOUD_IMAGE}:${NEXTCLOUD_IMAGE_TAG}
      from:
        kind: DockerImage
        name: ${NEXTCLOUD_IMAGE}:${NEXTCLOUD_IMAGE_TAG}
      importPolicy:
        scheduled: true
      name: ${NEXTCLOUD_IMAGE_TAG}
      referencePolicy:
        type: Source

- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      build: ${APP_NAME}-nginx-${DEPL_ID}
      app: ${APP_NAME}-${DEPL_ID}
    name: ${APP_NAME}-nginx-${DEPL_ID}
  spec:
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: nginx:latest
      generation: null
      importPolicy: {}
      name: latest
      referencePolicy:
        type: ""

- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      build: nginx
      app: ${APP_NAME}-${DEPL_ID}
    name: ${APP_NAME}-nginx-${DEPL_ID}
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_NAME}-nginx-${DEPL_ID}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        uri: ${NGINX_DOCKERFILE_REPO}
      contextDir: nextcloud-mariadb
      type: Git
    strategy:
      dockerStrategy:
        from:
          kind: DockerImage
          name: nginx:alpine
      type: Docker
    triggers:
    - type: ConfigChange

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APP_NAME}-${DEPL_ID}
    name: ${APP_NAME}-${DEPL_ID}
  spec:
    replicas: 1
    selector:
      app: ${APP_NAME}-${DEPL_ID}
      deploymentconfig: ${APP_NAME}-${DEPL_ID}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APP_NAME}-${DEPL_ID}
          deploymentconfig: ${APP_NAME}-${DEPL_ID}
      spec:
        containers:
        - name: nextcloud
          image: ${APP_NAME}-nextcloud-${DEPL_ID}
          imagePullPolicy: Always
          env:
          - name: NC_dbhost
            value: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
          - name: NC_dbuser
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
          - name: NC_dbpassword
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
          - name: NC_dbname
            value: ${MYSQL_DATABASE}
          - name: MYSQL_HOST
            value: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
          - name: MYSQL_DATABASE
            value: ${MYSQL_DATABASE}
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
          - name: NEXTCLOUD_ADMIN_USER
            valueFrom:
              secretKeyRef:
                key: nc-admin-username
                name: ${APP_NAME}-nextcloud-${DEPL_ID}
          - name: NEXTCLOUD_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: nc-admin-password
                name: ${APP_NAME}-nextcloud-${DEPL_ID}
          - name: HTTP_PROXY
            value: ${HTTP_PROXY}
          - name: HTTPS_PROXY
            value: ${HTTPS_PROXY}
          - name: NO_PROXY
            value: ${NO_PROXY}
          - name: http_proxy
            value: ${HTTP_PROXY}
          - name: https_proxy
            value: ${HTTPS_PROXY}
          - name: no_proxy
            value: ${NO_PROXY}
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9000
            timeoutSeconds: 5
          ports:
          - containerPort: 9000
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9000
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/www/html
            name: ${APP_NAME}-source
          - mountPath: /var/www/html/data
            name: ${APP_NAME}-data
            subPath: data
          - mountPath: /var/www/html/config
            name: ${APP_NAME}-data
            subPath: config
          - mountPath: /var/www/html/custom_apps
            name: ${APP_NAME}-data
            subPath: apps
          - mountPath: /var/www/html/config/autoconfig.php
            name: ${APP_NAME}-autoconfig
            subPath: autoconfig.php
          - mountPath: /var/www/html/config/oip-defaults.config.php
            name: ${APP_NAME}-oip-defaults
            subPath: oip-defaults.config.php
        - name: nginx
          image: ${APP_NAME}-nginx-${DEPL_ID}
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 1
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/www/html
            name: ${APP_NAME}-source
          - mountPath: /var/www/html/data
            name: ${APP_NAME}-data
            subPath: data
          - mountPath: /var/www/html/config
            name: ${APP_NAME}-data
            subPath: config
          - mountPath: /var/www/html/custom_apps
            name: ${APP_NAME}-data
            subPath: apps
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APP_NAME}-source
          emptyDir: {}
        - name: ${APP_NAME}-data
          persistentVolumeClaim:
            claimName: ${APP_NAME}-nextcloud-data-${DEPL_ID}
        - name: ${APP_NAME}-autoconfig
          configMap:
            name: cm-${APP_NAME}-nextcloud-autoconfig-${DEPL_ID}
        - name: ${APP_NAME}-oip-defaults
          configMap:
            name: cm-${APP_NAME}-nextcloud-oip-defaults-${DEPL_ID}
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - nextcloud
        from:
          kind: ImageStreamTag
          name: ${APP_NAME}-nextcloud-${DEPL_ID}:${NEXTCLOUD_IMAGE_TAG}
      type: ImageChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - nginx
        from:
          kind: ImageStreamTag
          name: ${APP_NAME}-nginx-${DEPL_ID}:latest
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP_NAME}-${DEPL_ID}
    name: ${APP_NAME}-${DEPL_ID}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APP_NAME}-${DEPL_ID}
      deploymentconfig: ${APP_NAME}-${DEPL_ID}
    sessionAffinity: None
    type: ClusterIP

- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      kubernetes.io/tls-acme: "true"
    labels:
      app: ${APP_NAME}-${DEPL_ID}
    name: ${APP_NAME}-${DEPL_ID}
  spec:
    host: ${NEXTCLOUD_HOST}
    port:
      targetPort: 8080-tcp
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: ${APP_NAME}-${DEPL_ID}
      weight: 100
    wildcardPolicy: None

- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    labels:
      app: ${APP_NAME}-${DEPL_ID}
    name: cron-${APP_NAME}-nextcloud-${DEPL_ID}
  spec:
    concurrencyPolicy: Replace
    jobTemplate:
      spec:
        successfulJobsHistoryLimit: 2
        failedJobsHistoryLimit: 2
        activeDeadlineSeconds: 3600
        template:
          spec:
            containers:
            - name: nextcloud-cron
              #TODO: Fix imagepullerror when using imagestream
              # image: ${APP_NAME}-nextcloud-${DEPL_ID}:${NEXTCLOUD_IMAGE_TAG}
              image: ${NEXTCLOUD_IMAGE}:${NEXTCLOUD_IMAGE_TAG}
              imagePullPolicy: Always
              args:
              - php
              - -f
              - /var/www/html/cron.php
              env:
              - name: NC_dbhost
                value: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
              - name: NC_dbuser
                valueFrom:
                  secretKeyRef:
                    key: database-user
                    name: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
              - name: NC_dbpassword
                valueFrom:
                  secretKeyRef:
                    key: database-password
                    name: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
              - name: NC_dbname
                value: nextcloud
              resources: {}
              terminationMessagePath: /dev/termination-log
              volumeMounts:
              - mountPath: /var/www/html
                name: ${APP_NAME}-source
              - mountPath: /var/www/html/data
                name: ${APP_NAME}-data
                subPath: data
              - mountPath: /var/www/html/config
                name: ${APP_NAME}-data
                subPath: config
              - mountPath: /var/www/html/custom_apps
                name: ${APP_NAME}-data
                subPath: apps
            dnsPolicy: ClusterFirst
            restartPolicy: Never
            securityContext: {}
            terminationGracePeriodSeconds: 30
            volumes:
            - name: ${APP_NAME}-source
              emptyDir: {}
            - name: ${APP_NAME}-data
              persistentVolumeClaim:
                claimName: ${APP_NAME}-nextcloud-data-${DEPL_ID}
    schedule: '*/15 * * * *'
    suspend: false

- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: ${APP_NAME}-${DEPL_ID}
    name: cm-${APP_NAME}-nextcloud-autoconfig-${DEPL_ID}
  data:
    autoconfig.php: |
      <?php

      $autoconfig_enabled = true;

      if (getenv('SQLITE_DATABASE')) {
          $AUTOCONFIG["dbtype"] = "sqlite";
          $AUTOCONFIG["dbname"] = getenv('SQLITE_DATABASE');
          $autoconfig_enabled = true;
      } elseif (getenv('MYSQL_DATABASE') && getenv('MYSQL_USER') && getenv('MYSQL_PASSWORD') && getenv('MYSQL_HOST')) {
          $AUTOCONFIG["dbtype"] = "mysql";
          $AUTOCONFIG["dbname"] = getenv('MYSQL_DATABASE');
          $AUTOCONFIG["dbuser"] = getenv('MYSQL_USER');
          $AUTOCONFIG["dbpass"] = getenv('MYSQL_PASSWORD');
          $AUTOCONFIG["dbhost"] = getenv('MYSQL_HOST');
          $autoconfig_enabled = true;
      } elseif (getenv('POSTGRES_DB') && getenv('POSTGRES_USER') && getenv('POSTGRES_PASSWORD') && getenv('POSTGRES_HOST')) {
          $AUTOCONFIG["dbtype"] = "pgsql";
          $AUTOCONFIG["dbname"] = getenv('POSTGRES_DB');
          $AUTOCONFIG["dbuser"] = getenv('POSTGRES_USER');
          $AUTOCONFIG["dbpass"] = getenv('POSTGRES_PASSWORD');
          $AUTOCONFIG["dbhost"] = getenv('POSTGRES_HOST');
          $autoconfig_enabled = true;
      }

      if ($autoconfig_enabled) {
          $AUTOCONFIG["dbtableprefix"] = getenv('NEXTCLOUD_TABLE_PREFIX') ?: "";

          $AUTOCONFIG["directory"] = getenv('NEXTCLOUD_DATA_DIR') ?: "/var/www/html/data";

          if (getenv('NEXTCLOUD_ADMIN_USER') && getenv('NEXTCLOUD_ADMIN_PASSWORD')) {
              $AUTOCONFIG["adminlogin"] = getenv('NEXTCLOUD_ADMIN_USER');
              $AUTOCONFIG["adminpass"] = getenv('NEXTCLOUD_ADMIN_PASSWORD');
          }
      }

- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: ${APP_NAME}-${DEPL_ID}
    name: cm-${APP_NAME}-nextcloud-oip-defaults-${DEPL_ID}
  data:
    oip-defaults.config.php: |
      <?php
      $CONFIG = array (
          'check_data_directory_permissions' => false,
          'proxy' => '${NEXTCLOUD_PROXY}',
          'trusted_domains' => 
          array (
            0 => 'localhost',
            1 => '${NEXTCLOUD_TRUSTED_DOMAIN}',
          ),
      );

- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-root_password: '{.data[''database-root-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    labels:
      app: ${APP_NAME}-${DEPL_ID}
    name: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
  stringData:
    database-name: ${MYSQL_DATABASE}
    database-password: ${MYSQL_PASSWORD}
    database-root-password: ${MYSQL_ROOT_PASSWORD}
    database-user: ${MYSQL_USER}

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: mysql://{.spec.clusterIP}:{.spec.ports[?(.name=="mariadb")].port}
    labels:
      app: ${APP_NAME}-${DEPL_ID}
    name: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
  spec:
    ports:
    - name: mariadb
      port: 3306
    selector:
      name: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: ${APP_NAME}-${DEPL_ID}
    name: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${DB_VOLUME_CAPACITY}

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      app: ${APP_NAME}-${DEPL_ID}
    name: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
  spec:
    replicas: 1
    selector:
      name: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP_NAME}-${DEPL_ID}
          name: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
      spec:
        containers:
        - name: mariadb
          image: ' '
          imagePullPolicy: IfNotPresent
          env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-root-password
                name: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          ports:
          - containerPort: 3306
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D
                $MYSQL_DATABASE -e 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${DB_MEMORY_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: ${DATABASE_SERVICE_NAME}-data
        volumes:
        - name: ${DATABASE_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${APP_NAME}-${DATABASE_SERVICE_NAME}-${DEPL_ID}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mariadb
        from:
          kind: ImageStreamTag
          name: mariadb:10.1
          namespace: ${DB_IMGSTR_NAMESPACE}
      type: ImageChange
    - type: ConfigChange
